open barcodes file (indexes.txt) for reading
    pull out barcode names and barcodes, put in dictionary (barcode name is key, barcode sequence is value). NOTE: might want to change this around for ease of checking whether/which barcode the index seqs match to
    keep a counter of the number of indexes encountered so that we know how many files to open for writing
close barcodes file

open R1, R2, R3, and R4 (aka read 1, index 1, index 2, read 2, respectively) for reading and open ((number of indexes)*2)+4) files for writing (2 files per correctly matched index, 2 files for index-swapped reads, and 2 files for unknown/low-quality indexed reads)
    -name files open for writing based on the names of the barcodes (the keys in the barcode dictionary) and have an R1 and R2 file for each barcode name. Also have R1 and R2 files for "unknown" and "swapped" categories
(keep them open by not using with open)

Loop through all 4 files that are open for reading (r1, r2, i1, i2) line by line in parallel
    initialize a line counter to keep track of line number
    if the line is a header line (line number divided by 4 returns a remainder of 1), store the header (minus the stuff after the space) in a temporary variable. Only needs to be done for one file because the headers should all match
    if the line is a sequence line (line number divided by 4 returns a remainder of 2), store the sequence in a temporary variable (needs to be done for all four files, stored in different temporary variables named r1_seq, r2_seq, i1_seq, i2_seq)
    if the line is the third line of the fastq record (line number divided by 4 returns a remainder of 3), store that in temporary variables for r1 and r2
    if the line is the quality score line (line number divided by 4 returns a remainder of 0), store the quality score in a temporary variable (needs to be done for all four files, named with suffixes r1, r2, i1, i2)
    increment the line counter

    after extracting and storing information for 1 record from all four files, check which category the reads fit in:
    initialize 'unknown' counter to 0
    initialize a dictionary to count the occurrences of each possible pair of indexes (both dual-matched and swapped). From the barcodes dictionary, pull out barcode names and make each possible pair (there should be 24*24 = 576 total pairs) a key; set each value to 0 initially.
    change the value stored in header temp variable to header-i1_seq-i2_seq
    change the temporary variable store in i2_seq to its reverse complement
    check if the sequences stored in i1_seq and i2_seq (remember that i2_seq has already been rev comp'd) are both in barcodes dictionary AND that there are no Ns in either index sequence AND that the index sequences pass quality cutoff (Q=30 for each individual base in seq)
        if not, then output header-i1_seq-i2_seq as header, r1(/r2) seq, r1(/r2) 3rd line, and r1(/r2) q scores to unknown.R1.fq (/unknown.R2.fq) file; also increment 'unknown' counter by 1
        if yes, move on to next check
    check if i1_seq is equal to i2_seq (remember that i2_seq has already been rev comp'd)
        if not, then output header-i1_seq-i2_seq as header, seqs, 3rd lines, and q scores to swapped.R1.fq and swapped.R2.fq; also find barcode names by referring to barcodes dictionary and then increment value in counter dictionary for key that corresponds to the pair of indexes
        if yes, then move on to next check
    check which barcode names the barcode sequences map to by referencing barcode dictionary
        output header-i1_seq-i2_seq as header, seqs, 3rd lines, and q scores to R1 and R2 files for that specific barcode name; also find barcode names by referring to barcodes dictionary and then increment value in counter dictionary for key that corresponds to the pair of indexes

return unknown counter and keys/values of counter dictionary, plus sums of correctly matched and swapped counts (use a list of possible correctly matched and possible incorrectly matched indexes in order to choose what values from dictionary go into each sum)

close files